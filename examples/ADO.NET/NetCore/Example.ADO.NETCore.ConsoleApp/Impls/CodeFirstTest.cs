using Example.ADO.NETCore.Domain.Entities;
using Example.Common;
using Microsoft.Extensions.Configuration;
using Sean.Core.DbRepository;
using Sean.Core.DbRepository.CodeFirst;
using Sean.Utility.Contracts;
using System;
using System.Reflection;

namespace Example.ADO.NETCore.ConsoleApp.Impls
{
    public class CodeFirstTest : ISimpleDo
    {
        private readonly IConfiguration _configuration;

        public CodeFirstTest(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public void Execute()
        {
            Test();
            //TestUpgrade();
        }

        private void Test()
        {
            var databaseType = DatabaseType.SQLite;
            var connString = _configuration.GetConnectionString("test_SQLite");

            ISqlGenerator sqlGenerator = SqlGeneratorFactory.GetSqlGenerator(databaseType);
            sqlGenerator.Initialize(connString);

            var templateCreateTableSqlList = sqlGenerator.GetCreateTableSql<TestEntity>(tableName => "{$TableName$}");
            var templateCreateTableSql = $"-- Generated by CodeFirst.ISqlGenerator.{Environment.NewLine}" + string.Join($"{Environment.NewLine}{Constants.MultiSqlSeparatorComment}{Environment.NewLine}", templateCreateTableSqlList);

            var createTableSqlList = sqlGenerator.GetCreateTableSql<TestEntity>();
            var createTableSql = string.Join(Environment.NewLine, createTableSqlList);

            var upgradeSqlList = sqlGenerator.GetUpgradeSql<TestEntity>();
            var upgradeSql = string.Join(Environment.NewLine, upgradeSqlList);
        }

        /// <summary>
        /// 数据库自动升级
        /// </summary>
        private void TestUpgrade()
        {
            var databaseType = DatabaseType.SQLite;
            var connString = _configuration.GetConnectionString("test_SQLite");

            IDatabaseUpgrader dbUpgrader = new DatabaseUpgrader(connString, databaseType);
            //dbUpgrader.Upgrade<TestEntity>();
            dbUpgrader.Upgrade(Assembly.GetAssembly(typeof(TestEntity)));
        }
    }
}
